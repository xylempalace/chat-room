
// Script used to send index.html in response to HTTP request

// Import express library and declare it as var app
const express = require('express')
const app = express()

const WebSocketServer = require('ws').Server;
var https = require('https')
var fs = require('fs')
var https_options = {
key: fs.readFileSync('/etc/letsencrypt/live/lexicomm.xyz/privkey.pem'),
cert: fs.readFileSync('/etc/letsencrypt/live/lexicomm.xyz/cert.pem'),
}

server = https.createServer(https_options, app).listen(80, () => {
        console.log("app2 is listening")
}
)
const port = 443



const sockserver = new WebSocketServer({clientTracking: true, noServer: true

})


// Creates a unique uid
sockserver.getUniqueID = function () {
  function s4() {
      return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
  }
  return s4() + s4() + '-' + s4();
};

// Import path library
const path = require('path')

const {
        RegExpMatcher,
        TextCensor,
        englishDataset,
        englishRecommendedTransformers,
  asteriskCensorStrategy,
} = require('obscenity');

const matcher = new RegExpMatcher({
        ...englishDataset.build(),
        ...englishRecommendedTransformers,
});

const strategy = asteriskCensorStrategy();
const censor = new TextCensor().setStrategy(strategy);

// All files that are used and their corresponding urls and mimi types
const files = {
 '/' : ['text/html', 'index.html'],
 '/index.html' : ['text/html', 'index.html'],
  '/web.css' : ['text/css', '../frontend/web.css'],
  '/test.js' : ['text/javascript', '../frontend/test.js'],
  '/favicon.ico' : ['image/vnd.microsoft.icon', '../images/favicon.ico'],
  '/lemEngine.js' : ['text/javascript', '../frontend/lemEngine.js'],
  '/games.js' : ['text/javascript', '../frontend/games.js'],
  '/sprites/tiles/floor.png' : ['image/png', '../frontend/sprites/tiles/floor.png'],
  '/sprites/tiles/wall.png' : ['image/png', '../frontend/sprites/tiles/wall.png'],
  '/sprites/tiles/grass.png' : ['image/png', '../frontend/sprites/tiles/grass.png'],
  '/sprites/tiles/pathCenter.png' : ['image/png', '../frontend/sprites/tiles/pathCenter.png'],
  '/sprites/tiles/pathNorth.png' : ['image/png', '../frontend/sprites/tiles/pathNorth.png'],
  '/sprites/tiles/pathSouth.png' : ['image/png', '../frontend/sprites/tiles/pathSouth.png'],
  '/sprites/tiles/pathEast.png' : ['image/png', '../frontend/sprites/tiles/pathEast.png'],
  '/sprites/tiles/pathWest.png' : ['image/png', '../frontend/sprites/tiles/pathWest.png'],
  '/sprites/tiles/pathNone.png' : ['image/png', '../frontend/sprites/tiles/pathNone.png'],
  '/sprites/tiles/pathNorthEast.png' : ['image/png', '../frontend/sprites/tiles/pathNorthEast.png'],
  '/sprites/tiles/pathNorthWest.png' : ['image/png', '../frontend/sprites/tiles/pathNorthWest.png'],
  '/sprites/tiles/pathSouthEast.png' : ['image/png', '../frontend/sprites/tiles/pathSouthEast.png'],
  '/sprites/tiles/pathSouthWest.png' : ['image/png', '../frontend/sprites/tiles/pathSouthWest.png'],
  '/sprites/tiles/pathNorthEastInner.png' : ['image/png', '../frontend/sprites/tiles/pathNorthEastInner.png'],
  '/sprites/tiles/pathNorthWestInner.png' : ['image/png', '../frontend/sprites/tiles/pathNorthWestInner.png'],
  '/sprites/tiles/pathSouthEastInner.png' : ['image/png', '../frontend/sprites/tiles/pathSouthEastInner.png'],
  '/sprites/tiles/pathSouthWestInner.png' : ['image/png', '../frontend/sprites/tiles/pathSouthWestInner.png'],
  '/sprites/tiles/pathEastWest.png' : ['image/png', '../frontend/sprites/tiles/pathEastWest.png'],
  '/sprites/tiles/pathNorthSouth.png' : ['image/png', '../frontend/sprites/tiles/pathNorthSouth.png'],
  '/sprites/speechBubble.png' : ['image/png', '../frontend/sprites/speechBubble.png'],
};

var clients = {};

// Serves corresponding file upon request
app.get('/*', (req, res) => {
  try {
    res.sendFile(path.join(__dirname, stuff[1]));
  } catch (err) {
    console.log(req.url);
    console.log(err);
  }
});


//https.createServer(https_options, app).listen(port, () => {
 // console.log(`Example app listening on port ${port}`);
// Socket Server Code

sockserver.on('connection', ws => {
  console.log('New client connected!');

  ws.on('close', () => {
    // When the` client disconnects it sends its username to other clients so they know to remove that player from their screen
    console.log(`${clients[ws.id][0]}(${ws.id}) has disconnected!`);
    sockserver.clients.forEach(client => {
      client.send(JSON.stringify({
        id: clients[ws.id][0],
        expired: true
      }));
    });
    delete clients[ws.id];
  });

  ws.on('message', (str) => {
    // Handles recieving data from clients
    var obj = JSON.parse(str);

    if ("posX" in obj) {
      // This code handles recieving and distributing positional data from one client to the others
      clients[ws.id][1] = obj.posX;
      clients[ws.id][2] = obj.posY;
      sockserver.clients.forEach(client => {
        client.send(JSON.stringify({
          id: obj.id,
          posX: obj.posX,
          posY: obj.posY
        }));
      });
    } else if ("msg" in obj) {
      // When a message is sent this code distributes that message to other clients
      sockserver.clients.forEach(client => {
        if (distance(clients[client.id][1], clients[ws.id][1], clients[client.id][2], clients[ws.id][2]) < 800) {
          const matches = matcher.getAllMatches(obj.msg);
          var newmsg = (censor.applyTo(obj.msg, matches));
          obj.msg = newmsg;
          console.log(`distributing message: ${obj.msg}`);
          client.send(JSON.stringify({
            id: obj.id,
            msg: obj.msg
      });
    } else if ("id" in obj) {
      // When a client selects a username
      var validName = true;

      // Checks if the username is taken and if so tells the client to select a different username
      for (const [key, value] of Object.entries(clients)) {
        if (obj.id == value) {
          validName = false;
          ws.send(JSON.stringify({
            invalidName: true,
            usernameError: "Username Taken"
          }));
          break;
const app = express()

const WebSocketServer = require('ws').Server;
var https = require('https')
var fs = require('fs')
var https_options = {
key: fs.readFileSync('/etc/letsencrypt/live/lexicomm.xyz/privkey.pem'),
cert: fs.readFileSync('/etc/letsencrypt/live/lexicomm.xyz/cert.pem'),
cert: fs.readFileSync('/etc/letsencrypt/live/lexicomm.xyz/cert.pem'),
}

server = https.createServer(https_options, app).listen(80, () => {
        console.log("app2 is listening")
}
)
const port = 443



const sockserver = new WebSocketServer({clientTracking: true, noServer: true

})


// Creates a unique uid
sockserver.getUniqueID = function () {
  function s4() {
      return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
  }
  return s4() + s4() + '-' + s4();
};

// Import path library
const path = require('path')

const {
        RegExpMatcher,
        TextCensor,
        englishDataset,
        englishRecommendedTransformers,
  asteriskCensorStrategy,
} = require('obscenity');

const matcher = new RegExpMatcher({
        ...englishDataset.build(),
        ...englishRecommendedTransformers,
});

const strategy = asteriskCensorStrategy();
const censor = new TextCensor().setStrategy(strategy);

// All files that are used and their corresponding urls and mimi types
const files = {
 '/' : ['text/html', 'index.html'],
 '/index.html' : ['text/html', 'index.html'],
  '/web.css' : ['text/css', '../frontend/web.css'],
  '/test.js' : ['text/javascript', '../frontend/test.js'],
  '/favicon.ico' : ['image/vnd.microsoft.icon', '../images/favicon.ico'],
  '/lemEngine.js' : ['text/javascript', '../frontend/lemEngine.js'],
  '/games.js' : ['text/javascript', '../frontend/games.js'],
  '/sprites/tiles/floor.png' : ['image/png', '../frontend/sprites/tiles/floor.png'],
  '/sprites/tiles/wall.png' : ['image/png', '../frontend/sprites/tiles/wall.png'],
  '/sprites/tiles/grass.png' : ['image/png', '../frontend/sprites/tiles/grass.png'],
  '/sprites/tiles/pathCenter.png' : ['image/png', '../frontend/sprites/tiles/pathCenter.png'],
  '/sprites/tiles/pathNorth.png' : ['image/png', '../frontend/sprites/tiles/pathNorth.png'],
  '/sprites/tiles/pathSouth.png' : ['image/png', '../frontend/sprites/tiles/pathSouth.png'],
  '/sprites/tiles/pathEast.png' : ['image/png', '../frontend/sprites/tiles/pathEast.png'],
  '/sprites/tiles/pathWest.png' : ['image/png', '../frontend/sprites/tiles/pathWest.png'],
  '/sprites/tiles/pathNone.png' : ['image/png', '../frontend/sprites/tiles/pathNone.png'],
  '/sprites/tiles/pathNorthEast.png' : ['image/png', '../frontend/sprites/tiles/pathNorthEast.png'],
  '/sprites/tiles/pathNorthWest.png' : ['image/png', '../frontend/sprites/tiles/pathNorthWest.png'],
  '/sprites/tiles/pathSouthEast.png' : ['image/png', '../frontend/sprites/tiles/pathSouthEast.png'],
  '/sprites/tiles/pathSouthWest.png' : ['image/png', '../frontend/sprites/tiles/pathSouthWest.png'],
  '/sprites/tiles/pathNorthEastInner.png' : ['image/png', '../frontend/sprites/tiles/pathNorthEastInner.png'],
  '/sprites/tiles/pathNorthWestInner.png' : ['image/png', '../frontend/sprites/tiles/pathNorthWestInner.png'],
  '/sprites/tiles/pathSouthEastInner.png' : ['image/png', '../frontend/sprites/tiles/pathSouthEastInner.png'],
  '/sprites/tiles/pathSouthWestInner.png' : ['image/png', '../frontend/sprites/tiles/pathSouthWestInner.png'],
  '/sprites/tiles/pathEastWest.png' : ['image/png', '../frontend/sprites/tiles/pathEastWest.png'],
  '/sprites/tiles/pathNorthSouth.png' : ['image/png', '../frontend/sprites/tiles/pathNorthSouth.png'],
  '/sprites/speechBubble.png' : ['image/png', '../frontend/sprites/speechBubble.png'],
};

var clients = {};

// Serves corresponding file upon request
app.get('/*', (req, res) => {
  try {
    var stuff = files[req.url];
    res.set('Content-Type', stuff[0]);
    res.sendFile(path.join(__dirname, stuff[1]));
  } catch (err) {
    console.log(req.url);
    console.log(err);
  }
});


//https.createServer(https_options, app).listen(port, () => {
 // console.log(`Example app listening on port ${port}`);
//});

// Socket Server Code

sockserver.on('connection', ws => {
  console.log('New client connected!');

  ws.on('close', () => {
    // When the` client disconnects it sends its username to other clients so they know to remove that player from their screen
    console.log(`${clients[ws.id][0]}(${ws.id}) has disconnected!`);
    sockserver.clients.forEach(client => {
      client.send(JSON.stringify({
        id: clients[ws.id][0],
        expired: true
      }));
    });
    delete clients[ws.id];
  });

  ws.on('message', (str) => {
    // Handles recieving data from clients
    var obj = JSON.parse(str);

    if ("posX" in obj) {
      // This code handles recieving and distributing positional data from one client to the others
      clients[ws.id][1] = obj.posX;
      clients[ws.id][2] = obj.posY;
      sockserver.clients.forEach(client => {
        client.send(JSON.stringify({
          id: obj.id,
          posX: obj.posX,
          posY: obj.posY
        }));
      });
    } else if ("msg" in obj) {
      // When a message is sent this code distributes that message to other clients
      sockserver.clients.forEach(client => {
        if (distance(clients[client.id][1], clients[ws.id][1], clients[client.id][2], clients[ws.id][2]) < 800) {
          const matches = matcher.getAllMatches(obj.msg);
          var newmsg = (censor.applyTo(obj.msg, matches));
          obj.msg = newmsg;
          console.log(`distributing message: ${obj.msg}`);
          client.send(JSON.stringify({
            id: obj.id,
            msg: obj.msg
          }));
        }
      });
    } else if ("id" in obj) {
      // When a client selects a username
      var validName = true;

      // Checks if the username is taken and if so tells the client to select a different username
      for (const [key, value] of Object.entries(clients)) {
        if (obj.id == value) {
          validName = false;
          ws.send(JSON.stringify({
            invalidName: true,
            usernameError: "Username Taken"
          }));
          break;
        }
      }

      // Checks if the username is explicit and if so tells the client to select a different username
      const matcher = new RegExpMatcher({
        ...englishDataset.build(),
        validName = false;
  proc-sys-fs-binfmt_misc.mount                     loaded active     mounted   Arbitrary Executable File Formats File System
  run-credentials-systemd\x2dsysusers.service.mount loaded active     mounted   /run/credentials/systemd-sysusers.service
  run-snapd-ns-lxd.mnt.mount                        loaded active     mounted   /run/snapd/ns/lxd.mnt
  run-snapd-ns.mount                                loaded active     mounted   /run/snapd/ns
  run-user-1000.mount                               loaded active     mounted   /run/user/1000
  snap-amazon\x2dssm\x2dagent-7983.mount            loaded active     mounted   Mount unit for amazon-ssm-agent, revision 7983
  snap-amazon\x2dssm\x2dagent-7993.mount            loaded active     mounted   Mount unit for amazon-ssm-agent, revision 7993
  snap-certbot-3643.mount                           loaded active     mounted   Mount unit for certbot, revision 3643
  snap-certbot-3700.mount                           loaded active     mounted   Mount unit for certbot, revision 3700
  snap-core18-2812.mount                            loaded active     mounted   Mount unit for core18, revision 2812
  snap-core20-2182.mount                            loaded active     mounted   Mount unit for core20, revision 2182
  snap-core20-2264.mount                            loaded active     mounted   Mount unit for core20, revision 2264
  snap-lxd-27948.mount                              loaded active     mounted   Mount unit for lxd, revision 27948
  snap-lxd-28373.mount                              loaded active     mounted   Mount unit for lxd, revision 28373
  snap-snapd-21184.mount                            loaded active     mounted   Mount unit for snapd, revision 21184

// Script used to send index.html in response to HTTP request

// Import express library and declare it as var app
const express = require('express')
const app = express()

const WebSocketServer = require('ws').Server;
var https = require('https')
var fs = require('fs')
var https_options = {
key: fs.readFileSync('/etc/letsencrypt/live/lexicomm.xyz/privkey.pem'),
cert: fs.readFileSync('/etc/letsencrypt/live/lexicomm.xyz/cert.pem'),
}

server = https.createServer(https_options, app).listen(80, () => {
        console.log("app2 is listening")
}
)
const port = 443



const sockserver = new WebSocketServer({server: server

})


// Creates a unique uid
sockserver.getUniqueID = function () {
  function s4() {
      return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
  }
  return s4() + s4() + '-' + s4();
};

// Import path library
const path = require('path')

const {
        RegExpMatcher,
        TextCensor,
        englishDataset,
        englishRecommendedTransformers,
  asteriskCensorStrategy,
} = require('obscenity');

const matcher = new RegExpMatcher({
        ...englishDataset.build(),
        ...englishRecommendedTransformers,
});

const strategy = asteriskCensorStrategy();
const censor = new TextCensor().setStrategy(strategy);

// All files that are used and their corresponding urls and mimi types
const files = {
 '/' : ['text/html', 'index.html'],
 '/index.html' : ['text/html', 'index.html'],
  '/web.css' : ['text/css', '../frontend/web.css'],
  '/test.js' : ['text/javascript', '../frontend/test.js'],
  '/favicon.ico' : ['image/vnd.microsoft.icon', '../images/favicon.ico'],
  '/lemEngine.js' : ['text/javascript', '../frontend/lemEngine.js'],
  '/games.js' : ['text/javascript', '../frontend/games.js'],
  '/sprites/tiles/floor.png' : ['image/png', '../frontend/sprites/tiles/floor.png'],
  '/sprites/tiles/wall.png' : ['image/png', '../frontend/sprites/tiles/wall.png'],
  '/sprites/tiles/grass.png' : ['image/png', '../frontend/sprites/tiles/grass.png'],
  '/sprites/tiles/pathCenter.png' : ['image/png', '../frontend/sprites/tiles/pathCenter.png'],
  '/sprites/tiles/pathNorth.png' : ['image/png', '../frontend/sprites/tiles/pathNorth.png'],
  '/sprites/tiles/pathSouth.png' : ['image/png', '../frontend/sprites/tiles/pathSouth.png'],
  '/sprites/tiles/pathEast.png' : ['image/png', '../frontend/sprites/tiles/pathEast.png'],
  '/sprites/tiles/pathWest.png' : ['image/png', '../frontend/sprites/tiles/pathWest.png'],
  '/sprites/tiles/pathNone.png' : ['image/png', '../frontend/sprites/tiles/pathNone.png'],
  '/sprites/tiles/pathNorthEast.png' : ['image/png', '../frontend/sprites/tiles/pathNorthEast.png'],
  '/sprites/tiles/pathNorthWest.png' : ['image/png', '../frontend/sprites/tiles/pathNorthWest.png'],
  '/sprites/tiles/pathSouthEast.png' : ['image/png', '../frontend/sprites/tiles/pathSouthEast.png'],
  '/sprites/tiles/pathSouthWest.png' : ['image/png', '../frontend/sprites/tiles/pathSouthWest.png'],
  '/sprites/tiles/pathNorthEastInner.png' : ['image/png', '../frontend/sprites/tiles/pathNorthEastInner.png'],
  '/sprites/tiles/pathNorthWestInner.png' : ['image/png', '../frontend/sprites/tiles/pathNorthWestInner.png'],
  '/sprites/tiles/pathSouthEastInner.png' : ['image/png', '../frontend/sprites/tiles/pathSouthEastInner.png'],
  '/sprites/tiles/pathSouthWestInner.png' : ['image/png', '../frontend/sprites/tiles/pathSouthWestInner.png'],
  '/sprites/tiles/pathEastWest.png' : ['image/png', '../frontend/sprites/tiles/pathEastWest.png'],
  '/sprites/tiles/pathNorthSouth.png' : ['image/png', '../frontend/sprites/tiles/pathNorthSouth.png'],
  '/sprites/speechBubble.png' : ['image/png', '../frontend/sprites/speechBubble.png'],
};

var clients = {};

// Serves corresponding file upon request
app.get('/*', (req, res) => {
  try {
    var stuff = files[req.url];
    res.set('Content-Type', stuff[0]);
    res.sendFile(path.join(__dirname, stuff[1]));
  } catch (err) {
    console.log(req.url);
    console.log(err);
  }
});


https.createServer(https_options, app).listen(port, () => {
 console.log(`Example app listening on port ${port}`);
});

// Socket Server Code

sockserver.on('connection', ws => {
  console.log('New client connected!');

  ws.on('close', () => {
    // When the` client disconnects it sends its username to other clients so they know to remove that player from their screen
    console.log(`${clients[ws.id][0]}(${ws.id}) has disconnected!`);
    sockserver.clients.forEach(client => {
      client.send(JSON.stringify({
        id: clients[ws.id][0],
        expired: true
      }));
    });
    delete clients[ws.id];
  });

  ws.on('message', (str) => {
    // Handles recieving data from clients
    var obj = JSON.parse(str);

    if ("posX" in obj) {
      // This code handles recieving and distributing positional data from one client to the others
      clients[ws.id][1] = obj.posX;
      clients[ws.id][2] = obj.posY;
      sockserver.clients.forEach(client => {
        client.send(JSON.stringify({
          id: obj.id,
          posX: obj.posX,
          posY: obj.posY
        }));
      });
    } else if ("msg" in obj) {
      // When a message is sent this code distributes that message to other clients
      sockserver.clients.forEach(client => {
        if (distance(clients[client.id][1], clients[ws.id][1], clients[client.id][2], clients[ws.id][2]) < 800) {
          const matches = matcher.getAllMatches(obj.msg);
          var newmsg = (censor.applyTo(obj.msg, matches));
          obj.msg = newmsg;
          console.log(`distributing message: ${obj.msg}`);
          client.send(JSON.stringify({
            id: obj.id,
            msg: obj.msg
          }));
        }
      });
    } else if ("id" in obj) {
      // When a client selects a username
      var validName = true;

      // Checks if the username is taken and if so tells the client to select a different username
      for (const [key, value] of Object.entries(clients)) {
        if (obj.id == value) {
          validName = false;
          ws.send(JSON.stringify({
            invalidName: true,
            usernameError: "Username Taken"
          }));
          break;
        }
      }

      // Checks if the username is explicit and if so tells the client to select a different username
      const matcher = new RegExpMatcher({
        ...englishDataset.build(),
        ...englishRecommendedTransformers,
      });
      if(matcher.hasMatch(obj.id)){
        console.log("Profane username detected");
        validName = false;
        ws.send(JSON.stringify({
          invalidName: true,
          usernameError: "Invalid Username"
        }));
      }

      if (validName) {
        // If the username is valid, the client is assigned a uid
        var haveId = true
        while (haveId) {
          ws.id = sockserver.getUniqueID();
          haveId = clients.hasOwnProperty(ws.id)
        }
        console.log(`username: ${obj.id} uid: ${ws.id}`);
        clients[ws.id] = [obj.id, 0.0, 0.0];
        // The client is then sent a comfimation message
        ws.send(JSON.stringify({
          invalidName: false,
          usr: obj.id
        }));
        // A join message is distributed to the rest of the users
        sockserver.clients.forEach(client => {
          client.send(JSON.stringify({
            id: obj.id,
            joinMsg: `${obj.id} has connected!`
          }));
        });
      }
    }
  })

  ws.onerror = function () {
    // Handles any errors with the websocket
    console.log('websocket error');
  }
});

function distance(x1, x2, y1, y2) {
  return Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);
}
